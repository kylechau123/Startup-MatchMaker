import React, { useState, useEffect } from "react";
import { Form, Input, Button, FormControl } from "react-bootstrap";

const RegistrationForm = () => {
  const [formData, setFormData] = useState({
    username: "",
    email: "",
    password: "",
  });
  const [errors, setErrors] = useState({});

  useEffect(() => {
    // Reset errors on every render
    setErrors({});
  }, []);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const validateForm = () => {
    let formErrors = {};

    if (!formData.username) {
      formErrors.username = "Username is required";
    }

    if (!formData.email) {
      formErrors.email = "Email is required";
    } else if (!isValidEmail(formData.email)) {
      formErrors.email = "Invalid email format";
    }

    if (!formData.password) {
      formErrors.password = "Password is required";
    }

    setErrors(formErrors);

    return Object.keys(formErrors).length === 0;
  };

  const isValidEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    if (validateForm()) {
      // Form is valid, perform registration logic
      // You can make an API request to register the user here
      // using the formData object
      console.log("Form data:", formData);
    }
  };

  return (
    <Form onSubmit={handleSubmit}>
      <FormControl.Group controlId="username">
        <Form.Label>Username</Form.Label>
        <Input
          type="text"
          name="username"
          value={formData.username}
          onChange={handleChange}
          required
        />
        {errors.username && (
          <Form.Control.Feedback type="invalid">
            {errors.username}
          </Form.Control.Feedback>
        )}
      </FormControl.Group>
      <FormControl.Group controlId="email">
        <Form.Label>Email</Form.Label>
        <Input
          type="email"
          name="email"
          value={formData.email}
          onChange={handleChange}
          required
        />
        {errors.email && (
          <Form.Control.Feedback type="invalid">
            {errors.email}
          </Form.Control.Feedback>
        )}
      </FormControl.Group>
      <FormControl.Group controlId="password">
        <Form.Label>Password</Form.Label>
        <Input
          type="password"
          name="password"
          value={formData.password}
          onChange={handleChange}
          required
        />
        {errors.password && (
          <Form.Control.Feedback type="invalid">
            {errors.password}
          </Form.Control.Feedback>
        )}
      </FormControl.Group>
      <Button type="submit">Register</Button>
    </Form>
  );
};

export default RegistrationForm;

